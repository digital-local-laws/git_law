.modal-body
  uib-alert  ng-repeat="alert in alerts" type="{{alert.type}}" close="closeAlert($index)"
    | {{alert.msg}}
  form  name="proposedLawNodeForm"  
    .form-group.has-feedback( ng-class="{'has-error': errors.title || \
    proposedLawNodeForm.title.$invalid, 'has-success': \
    proposedLawNode.attributes.title && !errors.title && \
    proposedLawNodeForm.title.$valid }" )
      label.control-label  for="title"   Title
      input.form-control( type='text' id="title" name="title" 
      ng-model="proposedLawNode.attributes.title" )
      span.glyphicon.glyphicon-ok.form-control-feedback(
      ng-show="proposedLawNode.attributes.title && !errors.title \
      && !proposedLawNodeForm.title.$invalid" )
      span.glyphicon.glyphicon-remove.form-control-feedback(
      ng-show="errors.title || proposedLawNodeForm.title.$invalid" )
      span.help-block  ng-repeat="error in errors.title"
        | {{error}}
        br
    .form-group.has-feedback( ng-class="{'has-error': errors.number || \
    proposedLawNodeForm.number.$invalid, 'has-success': \
    proposedLawNode.attributes.number && !errors.number && \
    proposedLawNodeForm.number.$valid }" \
    ng-if="proposedLawNode.nodeType.number" )
      label.control-label  for="number"   Number
      input.form-control( type='text' id="number" name="number"
      ng-model="proposedLawNode.attributes.number" )
      span.glyphicon.glyphicon-ok.form-control-feedback(
      ng-show="proposedLawNode.attributes.number && !errors.number \
      && !proposedLawNodeForm.number.$invalid" )
      span.glyphicon.glyphicon-remove.form-control-feedback(
      ng-show="errors.number || proposedLawNodeForm.number.$invalid"  
      span.help-block  ng-repeat="error in errors.number" )
        | {{error}}
        br
    .form-group.has-feedback( ng-class="{'has-error': errors.fileNameBase || \
    proposedLawNodeForm.fileNameBase.$invalid, 'has-success': \
    proposedLawNode.fileNameBase && !errors.fileNameBase && \
    proposedLawNodeForm.fileNameBase.$valid }" )  
      label.control-label  for="fileNameBase"   File Name
      input.form-control( type='text' id="fileNameBase" name="fileNameBase" \
      ng-model="proposedLawNode.fileNameBase" disabled=true )
      span.glyphicon.glyphicon-ok.form-control-feedback(
      ng-show="proposedLawNode.fileNameBase && !errors.fileNameBase && \
      !proposedLawNodeForm.fileNameBase.$invalid" )
      span.glyphicon.glyphicon-remove.form-control-feedback(
      ng-show="errors.fileNameBase || proposedLawNodeForm.fileNameBase.$invalid" )
      span.help-block  ng-repeat="error in errors.fileNameBase"
        | {{error}}
        br
    button.btn.btn-default  ng-click="addLevel(0)"
      span.glyphicon.glyphicon-plus
      | Add Level
    fieldset( ng-if="proposedLawNode.attributes.structure"
    ng-repeat="level in proposedLawNode.attributes.structure"
    ng-init="levelI = $index" ng-form="levelForm" )
      legend
        | Level {{$index + 1}}
      .text-right  ng-if="proposedLawNode.attributes.structure.length > 1"  
        button.btn.btn-danger  ng-click="removeLevel($index)"
          span.glyphicon.glyphicon-remove
          | Remove Level
      .form-group.has-feedback( ng-class="{'has-error': \
      levelForm.label.$invalid, 'has-success': \
      proposedLawNode.attributes.structure[$index].label && \
      levelForm.label.$valid }" )
        label.control-label  for="label"   Label
        input.form-control( type='text' id="label" name="label"
        ng-model="proposedLawNode.attributes.structure[$index].label" )
        span.glyphicon.glyphicon-ok.form-control-feedback(
        ng-show="proposedLawNode.attributes.structure[$index].label && \
        !levelForm.label.$invalid" )
        span.glyphicon.glyphicon-remove.form-control-feedback(
        ng-show="levelForm.label.$invalid" )
        span.help-block
          | What are the segments of the code that appears at this level called?
          | Use singular form.
      .form-group
        label.control-label  for="number"   Number
        select.form-control(
        ng-model="proposedLawNode.attributes.structure[$index].number"
        name="number" id="number" )
          option  ng-repeat="option in numberOptions" value="{{option[0]}}"  
            | {{option[1]}}
      .form-group( ng-class="{'has-error': levelForm.title.$invalid, \
      'has-success': !levelForm.title.$invalid && \
      proposedLawNode.attributes.structure[$index].title, 'has-feedback': true}" )
        label.control-label  for="title"  Titling
        .btn-group
          label.btn.btn-info( ng-repeat="title in titleOptions"
          ng-model="proposedLawNode.attributes.structure[levelI].title"
          uib-btn-radio="title[0]" )
            | {{title[1]}}
        span.glyphicon.glyphicon-ok.form-control-feedback(
        ng-show="!levelForm.title.$invalid && \
        proposedLawNode.attributes.structure[$index].title" ) 
        span.glyphicon.glyphicon-remove.form-control-feedback(
        ng-show="levelForm.title.$invalid" )
        span.help-block  ng-show="levelForm.title.$error.required"
          | Is required.
        span.help-block
          | Specify whether segments at this level may have descriptive titles.
      .form-group( ng-class="{'has-error': levelForm.text.$invalid, \
      'has-success': !levelForm.text.$invalid && \
      proposedLawNode.attributes.structure[$index].text, 'has-feedback': true}" )
        label.control-label  for="text"  Textual Content
        .btn-group
          label.btn.btn-info( ng-repeat="text in textOptions"
          ng-model="proposedLawNode.attributes.structure[levelI].text"
          uib-btn-radio="text[0]" )
            | {{text[1]}}
        span.glyphicon.glyphicon-ok.form-control-feedback(
        ng-show="!levelForm.text.$invalid && \
        proposedLawNode.attributes.structure[$index].text" ) 
        span.glyphicon.glyphicon-remove.form-control-feedback(
        ng-show="levelForm.text.$invalid" )
        span.help-block  ng-show="levelForm.text.$error.required"
          | Is required.
        span.help-block
          | Specify whether segments at this level may have textual content.
      .form-group( ng-class="{'has-error': levelForm.optional.$invalid, \
      'has-success': !levelForm.optional.$invalid && \
      proposedLawNode.attributes.structure[$index].optional, \
      'has-feedback': true}" )
        label.control-label  for="optional"  Level Optional
        .btn-group  data-toggle='buttons'
          label.btn.btn-info( ng-repeat="option in optionalOptions"
          ng-model="proposedLawNode.attributes.structure[levelI].optional"
          uib-btn-radio= "option[0]" )
            | {{option[1]}}
        span.glyphicon.glyphicon-ok.form-control-feedback(
        ng-show="!levelForm.optional.$invalid && \
        proposedLawNode.attributes.structure[$index].optional" )
        span.glyphicon.glyphicon-remove.form-control-feedback(
        ng-show="levelForm.optional.$invalid" )
        span.help-block  ng-show="levelForm.optional.$error.required"
          | Is required.
        span.help-block
          | Specify whether segments at this level are optional.
      button.btn.btn-default  ng-click="addLevel(levelI + 1)"
        span.glyphicon.glyphicon-plus
        | Add Level

.modal-footer
  button.btn.btn-primary( type="button" ng-click="save(proposedLawNode)"
  ng-disabled="proposedLawNodeForm.$invalid" )
    span.glyphicon.glyphicon-ok
    span ng-if="proposedLawNode.exists"
      | Update {{proposedLawNode.nodeType.label | capitalizeFirst}} Settings
    span ng-if="!proposedLawNode.exists"
      | Add {{proposedLawNode.nodeType.label | capitalizeFirst}}
  button.btn.btn-default  type="button" ng-click="cancel()"  
    span.glyphicon.glyphicon-remove
    | Cancel
